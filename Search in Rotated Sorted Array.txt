// Question Link :-   https://leetcode.com/problems/search-in-rotated-sorted-array/description/


class Solution {
    public int search(int[] nums, int target) {
    
        int pivot = findPivot(nums);
        
        //finding the target element using the pivot index
        
        //There are also 4 cases to check the target element
        
        //case 1
        if(pivot == -1) {
            return binarySearch(nums, target, 0, nums.length);
        }
        
        //case 2
        if(nums[pivot] == target) {
            return pivot;
        }
        
        //case 3
        if(nums[0] > target) {
            return binarySearch(nums, target, pivot + 1, nums.length - 1);
        }
        
        //case 4
        return binarySearch(nums, target, 0, pivot - 1);
        
    }
    
    int binarySearch(int[] arr, int target, int start, int end) {
        while(start <= end) {
            int mid = start + (end - start) / 2;
            
            if(arr[mid] > target) {
                start = mid - 1;
            }
            else if(arr[mid] < target) {
                end = mid + 1;
            }
            else {
                return mid;
            }
        }
        
        return -1;
    }
    
    int findPivot(int[] arr) {
        int start = 0, end = arr.length - 1;
        while(start <= end) {
            int mid = start + (end - start) / 2;
            //There are 4 cases for checking pivot
            
            //case 1
            if(arr[mid] > arr[mid+1]) {
                return mid;
            }
            
            //case 2 
            if(arr[mid] < arr[mid - 1]) {
                return mid-1;
            }
            
            //case 3
            if(arr[start] >= arr[mid]) {
                end = mid - 1;
            }
            
            //case 4
            if(arr[start] < arr[mid]) {
                satrt = mid + 1;
            }
        }
        
        return -1;
    }
}
